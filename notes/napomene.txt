plyfile             - took 1.9938790798187256 seconds to load Vinograd_mali.ply
self written ply.py - took 0.10284662246704102 seconds to load Vinograd_mali.ply
pywavefront         - errors out
open3d              - took 0.05296897888183594 seconds to load HECTOR_2020-07-20-13-53-55-segmented_vineyard.ply

self written ply.py: result
    dict (size 2)
        "points": pandas.DataFrame

open3d: result
    <class 'open3d.cpu.pybind.geometry.PointCloud'>
        object.points - Vector3dVector std::vector <Eigen::Vector3d> Use numpy.asarray() to access data

        np.asarray(object.points) - ndarray: (nr_of_points, 3)


CONCLUSION: use self written ply.py for pandas DataFrame, use open3d for numpy array

PROJEKT:
vizualizacija - DONE
format=point cloud - DONE
odredivanje nagiba oblaka tocaka - DONE
pronalazak visine koje odgovara za stvaranje tlocrta (prereza) - DONE (odma iz gornjeg problema)
uzet 2D presjek - DONE
pronaci redove u 2D
pronaci pocetak i kraj reda
...

pronaci redove u 2D: prvo opet primjenit statistical removal (DONE). pa grupiranje tocaka s k-means uzimajuci min distance kao mjeru. iz toga uprosjecit tocke i povuc crtu
                     - k-means uz min distance vjerojatno ne bi dobro radio. vektorsko odredivanje udaljenosti (vektor usporedbe je usmjerenje redova iz 2D) kao mjera
                     - EM algoritam umjesto k-means -> isto ne daje dobra rijesenja. vidljivo u folderu `classification`

                     - vektorsko odredivanje udaljenosti

REDOSLIJED IZVODENJA SKRIPTI:
c++ remove statistical outlier (0.664778s to process Vinograd_mali-Cloud.ply; 0.4367527961730957s for remove_noise.py on same file with same results)
find_plane.py
map_3d_to_2d.py/remove_ground.py
remove_noise.py
find_vineyard_angle_ransac.py



ALTERNATIVNO RIJESENJE:
remove statistical outliers. RANSAC za pronaci pod, i onda vise iteracija RANSAC-a (gdje se svaki red uklanja kad je naden), za pronaci svaki red
    - RANSAC u ovom slucaju opet odredi ravninu koja prolazi kroz sve tocke